三次握手：
首先TCP服务端先建立TCB（传输控制块）时刻准备接收客户端的连接请求
一：客户端向服务端发起连接请求，传输连接请求报文Syn=1，初始序列号seq=x
二：服务端接收到连接请求，同意后做出应答，报文头Syn=1，Ack=1，ack=x+1，seq=y
三：客户端在接收到服务端的同意后，继续向服务端发出已收到连接请求，报文头Ack=1，ack=y+1,seq=x+1
①为什么要建立三次握手，而不是两次握手：因为如果客户端发出的连接请求由于某些原因超时了，那么该请求就失效了，过了一段时间网络通畅
后服务端又接收到了该请求，这时如果是两次握手，那么双方就建立了连接了，如果是三次握手的话，即使服务端同意，客户端也不会发出第三
次的确认请求，此时就不会建立失效的连接了。

四次挥手：
一：客户端向服务端发起断开连接请求，传输报文头fin=1，seq=u
二：服务端接收到客户端的连接断开请求，同意后做出应答，报文头Ack=1，ack=u+1（此时，客户端已和服务端断开连接，处于半关闭状态，
即客户端已经没有内容传输给服务端了，但如果服务端有数据传输过来，客户端还是需要接收的）
三：服务端向客户端发出断开连接请求，传输报文头fin=1，ack=u+1
四：客户端收到服务端的连接断开请求，同意后做出确认，Ack=1，ack=w+1，seq=u+1（此时连接还不能直接关闭，需要等待2Msl的时间，
确保接收到最后一条数据报文）
②为什么建立连接需要三次，而释放连接需要四次？
因为建立连接时Syn和Ack可以一起发送，而释放连接时Fin和Ack不能一起发送
其次当客户端和服务端断开连接后，服务端可能还有数据要发送，只有当服务端没有数据发送时，才会申请和客户端断开连接。
③为什么释放连接前要等待2msl？
因为2msl（是最长报文传输时间），要确保最后一条报文传输过来，且也是防止建立失效的请求（类似于三次握手的那种情况）
④如果已建立连接，此时客户端断开连接怎么办？
Tcp中有一个超时检测的机制，当客户端2小时没有给服务端发送消息时，服务端每隔75S给客户端发送一个探测报文段，连续发送10次，如果
客户端没有任何响应，那么就会和客户端断开连接
⑤Tcp如何保证传输的数据是安全的
Tcp采用的是应答机制
Tcp有超时重传
Tcp有流量控制
Tcp有数据包校验
⑥：TCP粘包黏包是什么，怎么解决
TCP粘包/黏包就是基于TCP发送数据时，出现了多个字符串“粘 ”在一起或者是一个字符串被“拆”开了
eg：发送字符串123，接收到可能就是123123或者12
解决思路：使用Netty自带的解码器
⑦：如果SYN半连接队列满了怎么处理？只能丢掉连接吗？
通过开启cookies功能就可以在不使用SYN半连接队列的情况下成功建立连接。
⑧：三次握手可以携带数据吗？
前两次是不可以携带的，第三次可以携带数据，当客户端知道服务器可以正常接收数据后就可以携带。

浏览器输入URL发生的事情：
一：根据URL通过DNS域名解析出ip地址
二：建立TCP连接
三：发送http请求
四：服务器处理请求，响应结果
五：连接结束
dns的工作流程：
先去本地缓存查找域名对应的ip地址，本机缓存不存在则就去运营商那里找，一般都有 ，如果还是没找到，就去根服务器找，然后再找顶级，再找权威这样迭代下来，最终找到返回。
解析过的域名就会存放到本地缓存当中。

七层结构：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层
数据链路层：传输的数据基本单位是帧
网络层：ip,icmp 
传输层：tcp/udp
应用层：http，smtp，ftp

http和https的区别？
http的端口默认是80，https的端口默认是443
http的URL是以http开头的，https的URL是以https开头的
http无需证书，https需要到ca去申请证书，需要一定的费用
http是明文传输，数据是未加密的，https传输的数据时加密过的（通过SSL加密传输协议来加密），所以https比http安全

https加密的方法：通过SSL加密，客户端请求服务端的时候得到服务器的证书和公钥，然后自己生成一个密钥，通过公钥加密，传输给服务端，服务端通过私钥解密，获取到密钥，之后就可以通过对称加密通信。
为什么还要密钥这么麻烦，直接用公钥私钥通信不行吗？对称加密比较快，非对称加密比较慢一点。

http和http2的区别：
http2支持二进制传输，header压缩，多路复用，ServerPush

http状态码：
5xx：服务器错误
4xx：客户端错误
3xx：重定向
2xx：响应成功
1xx：接收成功收到了或正在处理

Http和RPC
Http和RPC其实是两个维度的东西，Http是一种协议，RPC则是远程调用，RPC通信可以用HTTP协议也可以用自定义协议
RPC调用常见于公司内部调用（屏蔽一些细节，让它看起来还和本地调用一样，Dubbo）
Http调用常见于外部调用（它的通用性高，一般一些第三方的接口都是Http调用，Feign）