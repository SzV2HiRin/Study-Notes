一：公平锁和非公平锁
Synchronized和lock默认就是非公平锁，lock可通过构造方法来变成公平锁，非公平锁：一堆线程再争抢锁资源时，不按照先来后到的顺序争抢
公平锁：根据申请锁的顺序来获取锁，但效率不高      非公平锁：提高了效率，但有的线程可能一直没法获取到锁
二：可重入锁
A方法调用B方法，两个方法都有锁，当获取了A方法的锁后可以直接获取到B方法的锁（注意两个锁是同一个锁对象）
或者是获取到A方法的锁，之后可以继续获取A方法的锁，不过要注意获取到几次就要释放几次锁
三：乐观锁和悲观锁
悲观锁：Synchronized和lock都是悲观锁，面对请求资源直接加锁，乐观锁：通过新增一个Vresion字段实现，当涉及到写或修改操作时才加锁
四：自旋锁
当获取不到锁时，就在一个循环体内不停的获取锁直到获取成功，可以用atomicReference来实现，它和互斥锁synchronized一样都是为了保证资源同一时刻只能有一个线程来访问
五：读写锁
读写锁又称共享锁和排它锁，读写锁可以用ReentrantReadWriteLock来实现，读时允许其它线程也执行读操作，写时任何线程都不能有任何操作
六：行锁和表锁
Mysql的InnoDB就是行锁，一次锁一行数据，Mysql的myIsem是表锁，一次将整张表都锁起来