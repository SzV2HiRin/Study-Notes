hash算法：
主要是对一个key计算hash值，然后再对hash值对节点数量进行取模，最终映射到某个节点上。
hash冲突：产生hash冲突可以采用拉链法，线性探测法解决。
例子：MD5加密就是hash算法的具体实现
hash算法的特点：就是用于对数据加密或者让数据变短一些的算法，针对于同一数据，hash多少次每次结果都一样

一致性hash算法：
一致性hash算法的底层数据结构是一个环，环上有2的32次方个点，即0、1、2、4、8...2^32-1环上每个点都有hash值
圆环上还放着不同的机器节点，还有一些均匀分布的虚拟节点。
计算key的hash值，然后再对hash值对节点数量（2^32-1）进行取模，最终映射到某个点上，然后按照顺时针寻找距离
当前点最近的虚拟节点，然后再通过虚拟节点找机器节点存放数据。
当有机器节点宕机后，该节点上的数据都会存放到下一个节点上。

hash算法和一致性hash算法的区别：
现在有一个场景我们要存放10W个图片，我们有3台服务器，采用hash算法的话，存储时需要hash%3来计算具体存放的服务器，但是有个问题我们新加一台服务器，就需要对已存放的所有数据进行rehash否则会找
不到之前存储的图片。rehash在数据量大的时候会消耗很大性能。
采用一致性hash算法的话，它会固定对2的32次方-1进行取模，且所有的节点形成一个圆环状，新增一个机器的话，如果新增的机器在第2个节点之前且在2个节点之间的旧机器在新机器后面的话只需要把旧机器的
数据迁移到新增机器上面，如果扣减一个机器的话，只需把数据迁移到后面一个结点即可，所以说新增/删除机器后性能损耗是很小的。


